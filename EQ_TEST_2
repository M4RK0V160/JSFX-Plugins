//author: M4RK0V
//a functional eq, using the libaudioverse EQ cookbook
//https://github.com/libaudioverse/libaudioverse/blob/master/audio%20eq%20cookbook.txt

desc:Multiple filter single band EQ


//-60,24
slider1:gain_db=0<-80,12,1>gain(dB)
slider3:filter=0<0,8,1{LPF,HPF,BPF constant skirt, BPF constant peak, Notch, APF, PeakingEQ, LowShelf, HighShelf}>Filter
slider5:freq=20<20,20000,10>frequency
slider6:Q=0.1<0.001,10,0.01>Q

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
sampleRate = srate;

@slider
dbGain = gain_db;
filterK = filter;
A = sqrt(10^(dbGain/20));
omega = 2*$pi*freq/sampleRate;
sinOmega = sin(omega);
cosOmega = cos(omega);

alpha = sinOmega/(2*Q);
beta = sqrt(A)/Q;


@sample

(filterK == 0) ? //LPF
(
 b0 = (1-cosOmega)/2;
 b1 =  1-cosOmega;
 b2 = (1-cosOmega)/2;
 a0 =  1+alpha;
 a1 = -2*cosOmega;
 a2 =  1-alpha;
):
(filterK == 1) ? //HPF
(
 b0 =  (1 + cosOmega)/2;
 b1 = -(1 + cosOmega);
 b2 =  (1 + cosOmega)/2;
 a0 =   1 + alpha;
 a1 =  -2*cosOmega;
 a2 =   1 - alpha;
):
(filterK == 2) ? //BPF constant skirt gain
(
 b0 =   Q*alpha;
 b1 =   0;
 b2 =  -Q*alpha;
 a0 =   1 + alpha;
 a1 =  -2*cosOmega;
 a2 =   1 - alpha;
):
(filterK == 3) ? //BPF constant peak gain
(
 b0 =   alpha;
 b1 =   0;
 b2 =  -alpha;
 a0 =   1 + alpha;
 a1 =  -2*cosOmega;
 a2 =   1 - alpha;
):
(filterK == 4) ? //notch
(
 b0 =   1;
 b1 =  -2*cosOmega;
 b2 =   1;
 a0 =   1 + alpha;
 a1 =  -2*cosOmega;
 a2 =   1 - alpha;
 ):
(filterK == 5) ? //APF
(
 b0 =   1 - alpha;
 b1 =  -2*cosOmega;
 b2 =   1 + alpha;
 a0 =   1 + alpha;
 a1 =  -2*cosOmega;
 a2 =   1 - alpha;
):
(filterK == 6) ? //peakingEQ
(
 b0 =   1 + alpha*A;
 b1 =  -2*cosOmega;
 b2 =   1 - alpha*A;
 a0 =   1 + alpha/A;
 a1 =  -2*cosOmega;
 a2 =   1 - alpha/A;
):
(filterK == 7) ? // lowShelf
(
 b0 =    A*( (A+1) - (A-1)*cosOmega + beta*sinOmega);
 b1 =  2*A*( (A-1) - (A+1)*cosOmega);
 b2 =    A*( (A+1) - (A-1)*cosOmega - beta*sinOmega);
 a0 =        (A+1) + (A-1)*cosOmega + beta*sinOmega;
 a1 =   -2*( (A-1) + (A+1)*cosOmega);
 a2 =        (A+1) + (A-1)*cosOmega - beta*sinOmega;
):
(filterK == 8) ? // highShelf
(
 b0 =    A*( (A+1) + (A-1)*cosOmega + beta*sinOmega);
 b1 = -2*A*( (A-1) + (A+1)*cosOmega);
 b2 =    A*( (A+1) + (A-1)*cosOmega - beta*sinOmega);
 a0 =        (A+1) - (A-1)*cosOmega + beta*sinOmega;
 a1 =    2*( (A-1) - (A+1)*cosOmega);
 a2 =        (A+1) - (A-1)*cosOmega - beta*sinOmega;
);

y_n_2 = y_n_1;
y_n_1 = y_n;
y_n = (b0/a0)*spl_0 + (b1/a0)*spl_1 + (b2/a0)*spl_2 - (a1/a0)*y_n_1 - (a2/a0)*y_n_2;

spl_2 = spl_1;
spl_1 = spl_0;
spl_0 = spl0;
spl0 = spl1 = y_n;